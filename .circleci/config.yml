# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

# Define the used images
node12: &node12
  working_directory: &workdir_node12 ~/node-tradfri-client/node12
  docker:
    - image: circleci/node:12

node14: &node14
  working_directory: &workdir_node14 ~/node-tradfri-client/node14
  docker:
    - image: circleci/node:14

node16: &node16
  working_directory: &workdir_node14 ~/node-tradfri-client/node16
  docker:
    - image: circleci/node:16

# use "latest" for lint and publish
latest: &latest
  working_directory: &workdir_latest ~/node-tradfri-client/latest
  docker:
    - image: circleci/node:latest

# some job filters
tags_and_branches: &tags_and_branches
  filters:
    tags:
      only: /^v.*/

only_tags: &only_tags
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

# Which files to preserve between jobs
whitelist: &whitelist
  paths:
    - build/*
    - node_modules/*
    - src/*
    - test/*
    - coverage/*
    - .npmignore
    - dts-bundle.json
    - package.json
    - README.md
    - tsconfig.json
    - tsconfig.*.json
    - tslint.json

version: 2
jobs:
# ----------------------------------------------------
  test_node12:
    <<: *node12

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-node12-{{ checksum "package-lock.json" }}

      - run:
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-node12-{{ checksum "package-lock.json" }}

      - run:
          name: Run component tests
          command: npm run test:ts

# ----------------------------------------------------
  test_node14:
    <<: *node14

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-node14-{{ checksum "package-lock.json" }}

      - run:
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-node14-{{ checksum "package-lock.json" }}

      - run:
          name: Run component tests
          command: npm run test:ts

# ----------------------------------------------------
  test_node16:
    <<: *node16

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-node16-{{ checksum "package-lock.json" }}

      - run:
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-node16-{{ checksum "package-lock.json" }}

      - run:
          name: Run component tests
          command: npm run test:ts

# ----------------------------------------------------
  test_latest:
    <<: *latest

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-latest-{{ checksum "package-lock.json" }}

      - run:
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-latest-{{ checksum "package-lock.json" }}

      # on latest also lint the code
      - run:
          name: Lint TypeScript code
          command: npm run lint

      - run:
          name: Run component tests
          command: npm run test:ts

      # persist the build files, so we can pick them up in the deploy job
      - persist_to_workspace:
          root: *workdir_latest
          <<: *whitelist

# ----------------------------------------------------
# generates a clean build of the TypeScript sources
# to make sure there were no leftover build files
  coverage:
    <<: *latest

    steps:
      - attach_workspace:
          at: *workdir_latest

      - run:
          name: Generate coverage report
          command: npm run coverage

      - run:
          name: Upload it to coveralls.io
          command: if [[ $CIRCLE_BRANCH == pull* ]]; then echo "Skipping coverage upload for PR builds"; else COVERALLS_SERVICE_NAME="CircleCI" COVERALLS_SERVICE_JOB_ID="$CIRCLE_BUILD_NUM" npm run coveralls; fi

# ----------------------------------------------------
# generates a clean build of the TypeScript sources
# to make sure there were no leftover build files
  build:
    <<: *latest

    steps:
      - attach_workspace:
          at: *workdir_latest

      - run:
          name: Clean previous builds
          command: npm run prebuild

      - run:
          name: Build the source files
          command: npm run build

      - run:
          name: Bundle the declaration files
          command: npm run build:dts

      - persist_to_workspace:
          root: *workdir_latest
          <<: *whitelist

# ----------------------------------------------------
# Deploys the final package to NPM
  deploy:
    <<: *latest

    steps:
      - attach_workspace:
          at: *workdir_latest

      - run:
          name: Login to npm
          command: npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
      - run:
          name: Publish package to npm
          command: npm publish

# ----------------------------------------------------
# Fit it all together
workflows:
  version: 2

  test-and-deploy:
    jobs:
      - test_node12:
          <<: *tags_and_branches
      - test_node14:
          <<: *tags_and_branches
      - test_node16:
          <<: *tags_and_branches
      - test_latest:
          <<: *tags_and_branches

      - coverage:
          requires:
            - test_latest
          <<: *tags_and_branches

      # build only on tagged builds and if all tests succeeded
      - build:
          requires:
            - test_node12
            - test_node14
            - test_node16
            - test_latest
          <<: *only_tags

      # deploy only on tagged builds and if all tests succeeded
      - deploy:
          requires:
            - build
          <<: *only_tags
